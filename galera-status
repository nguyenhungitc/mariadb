#!/bin/bash

###############
# Based on :
# http://www.codership.com/wiki/doku.php?id=monitoring 
# https://github.com/fridim/galera-status

AUTHOR="Patrice Scheidt <patrice-github@maskme.org>"
VERSION=1.1
PROGNAME="galera-status"

UNSPECIFIED_NODE=99
UPDATE_WEIGHT_ERROR=-1
MARGIN_LEFT=23

CMD_ROW=31

col_width=34
last_terminal_width=0
width_needed=1000
in_node_index=$UNSPECIFIED_NODE

keypress=''
first="true"
connect_timeout="--connect-timeout=2"

print_help() {
  cat <<- EOT
         FILE: $PROGNAME
        USAGE: $PROGNAME [--help] [--follow] [--hosts=<node1>,<node2>,...] [MySQL options]

      OPTIONS: --help        this help
               --follow      continuously refresh status
               --hosts       comma-separated list of node hosts

               By default galera-status will try to resolve the list of hosts, username
               and password from the local configuration when running on one of the
               cluster nodes. If you're using another sst-method than "xtrabackup" or
               "mariabackup", you have to specify username and password manually.
               If you're running the script from another machine, you can specify the
               list of hosts using the --hosts parameter.

               In follow-mode you can press 'r' to reset the cluster's replication health
               status or 'q' to quit the script. You can also change a node's weight by
               pressing 'w', if the database account used has the privilege to change
               global variables.  When chaning a node's weight, the script asks for the
               node's index and new weight. The first node has the index **0**, the second
               node hast the index **1** and so on. The node's weight must be specified as
               integer value >= 0.

  
  DESCRIPTION: $PROGNAME shows status and health of all nodes of a Galera cluster.
  
     EXAMPLES: galera-status --hosts=172.0.0.1,172.0.0.2,172.0.0.3 -uuser -psecret --follow
               galera-status --follow
  
      VERSION: $VERSION
       AUTHOR: $AUTHOR
EOT
  exit 0 
}

init_colors() {
  esc="\033";

  red_f="${esc}[31m"; green_f="${esc}[32m"; yellow_f="${esc}[33m"; gray_f="${esc}[30m";

  red_b="${esc}[41m";

  bold_on="${esc}[1m"; invert_on="${esc}[7m";

  reset_c="${esc}[0m";
} 

pos() {
  echo "${esc}[$1;${col}H"
}

print_header() {
  col=0
  echo -e "
${bold_on}${gray_f}$(pos 2)NODE INFORMATION:${reset_c}

host...............:
mysqld reachable...:
node index/name....:
last updated.......:

${bold_on}${gray_f}NODE STATUS:${reset_c}

cluster status.....:
cluster size.......:
node/cluster weight:
ready..............:
connected..........:
state comment......:

${bold_on}${gray_f}REPLICATION HEALTH (The lower the better)${reset_c}

flow control paused:
flow control sent..:
send queue avg.....:
recv queue avg.....:
pot./act. # threads:

${bold_on}${gray_f}CLUSTER INTEGRITY (should be the same on all nodes)${reset_c}

cluster config ID..:
last committed.....:
"
}

print_dividers() {
  divider_size=$(( MARGIN_LEFT + host_count * col_width))
  col=0
  echo -e "$(pos 1)${bold_on}${gray_f}$(hr $divider_size '-')$(pos 8)$(hr $divider_size '-')$(pos 17)$(hr $divider_size '-')$(pos 25)$(hr $divider_size '-')$(pos 30)$(hr $divider_size '-')${reset_c}"
}

print_values() {
  # Removes last-updated-marker
  for (( i = 0; i < host_count; i++)); do
    col=$((i * col_width + MARGIN_LEFT + ${#update_date}))
    echo -e "$(pos 7)  "
  done

  col=$(( col_width * counter + MARGIN_LEFT))
  echo -e "
$(pos 4)$(hr $col_width ' ')$(pos 4)$host
$(pos 5)$(hr $col_width ' ')$(pos 5)$reachable
$(pos 6)$(hr $col_width ' ')$(pos 6)$node_name
$(pos 7)$(hr $col_width ' ')$(pos 7)$update_date *
$(pos 11)$(hr $col_width ' ')$(pos 11)$cluster_status
$(pos 12)$(hr $col_width ' ')$(pos 12)$cluster_size
$(pos 13)$(hr $col_width ' ')$(pos 13)$node_weight
$(pos 14)$(hr $col_width ' ')$(pos 14)$ready
$(pos 15)$(hr $col_width ' ')$(pos 15)$connected
$(pos 16)$(hr $col_width ' ')$(pos 16)$local_state_comment
$(pos 20)$(hr $col_width ' ')$(pos 20)$flow_control_paused
$(pos 21)$(hr $col_width ' ')$(pos 21)$flow_control_sent
$(pos 22)$(hr $col_width ' ')$(pos 22)$local_send_queue_avg
$(pos 23)$(hr $col_width ' ')$(pos 23)$local_recv_queue_avg
$(pos 24)$(hr $col_width ' ')$(pos 24)${cert_deps_distance%.*}$slave_threads
$(pos 28)$(hr $col_width ' ')$(pos 28)$cluster_conf_id_out
$(pos 29)$(hr $col_width ' ')$(pos 29)$last_committed
"
}

hr() {
  for (( i=0; i<$1; i++)); do
    printf "$2"
  done
}

unsci() {
  shopt -s extglob
  unscivalue=$(bc -l <<< $(sed -E 's/([+-]?[0-9.]+)[eE]\+?(-?)([0-9]+)/(\1*10^\2\3)/g' <<< $1))
  # trim some trailing zeros
  echo "${unscivalue%%+(00)}"
  shopt -u extglob
}

get_value_from_provider_options() {
  po_value=$(echo $provider_options | tr ';' '\n' | grep $1 | cut -d '=' -f2)
  echo $po_value
}

update_variables() {
  max_len=$(( col_width - 1 ))
  node_name=""
  reachable="${bold_on}${red_f}OFFLINE${reset_c}"
  cluster_status=""
  cluster_size=""
  ready=""
  connected=""
  local_state_comment=""
  flow_control_paused=""
  flow_control_sent=""
  local_send_queue_avg=""
  local_recv_queue_avg=""
  cert_deps_distance=""
  slave_threads=""
  cluster_conf_id=""
  last_committed=""
  provider_options=""
  node_weight=""

  update_date=$(date '+%H:%M:%S')
  update_date=${update_date:0:$((max_len-2))}

  while read line; do
    varname=$(echo "$line" | cut -f 1)
    varname=${varname/wsrep_}
    value=$(echo "$line" | cut -f 2 | sed "s/'//g")
    eval "$varname='$value'"
  done < <(mysql "$@" -h$host $username $password $connect_timeout -N -B -e "SHOW STATUS LIKE 'wsrep_%';" 2> /dev/null)

  while read line; do
    varname=$(echo "$line" | cut -f 1)
    varname=${varname/wsrep_}
    value=$(echo "$line" | cut -f 2 | sed "s/'//g")
    eval "$varname='$value'"
  done < <(mysql "$@" -h$host $username $password $connect_timeout -N -B -e "SHOW VARIABLES LIKE 'wsrep_%';" 2> /dev/null) 

  if [[ $cluster_status == 'Primary' ]]; then
    cluster_status="${bold_on}${green_f}${cluster_status:0:$max_len}${reset_c}"
  else
    cluster_status="${bold_on}${red_f}${cluster_status:0:$max_len}${reset_c}"
  fi

  if [[ $ready == 'ON' ]]; then
    ready="${bold_on}${green_f}$ready${reset_c}"
  else
    ready="${bold_on}${red_f}$ready${reset_c}"
  fi

  if [[ $connected == 'ON' ]]; then
    connected="${bold_on}${green_f}$connected${reset_c}"
  else
    connected="${bold_on}${red_f}$connected${reset_c}"
  fi

  case "$local_state_comment" in
    Joining)
      local_state_comment="${bold_on}${yellow_f}${local_state_comment:0:$max_len}${reset_c}" ;;
    Waiting\ for\ SST)
      local_state_comment="${bold_on}${yellow_f}${local_state_comment:0:$max_len}${reset_c}" ;;
    Joined)
      local_state_comment="${bold_on}${yellow_f}${local_state_comment:0:$max_len}${reset_c}" ;;
    Donor)
      local_state_comment="${bold_on}${yellow_f}${local_state_comment:0:$max_len}${reset_c}" ;;
    Synced)
      local_state_comment="${bold_on}${green_f}${local_state_comment:0:$max_len}${reset_c}" ;;
    *)
      local_state_comment="${bold_on}${red_f}${local_state_comment:0:$max_len}${reset_c}" ;;
  esac

  if [[ "$flow_control_paused" != "" ]]; then
    flow_control_paused=$(unsci $flow_control_paused)
    if [[ $(bc -l <<< $flow_control_paused*10) > '1' ]]; then
      flow_control_paused="${bold_on}${red_f}${flow_control_paused:0:$max_len}${reset_c}"
    else
      flow_control_paused=${flow_control_paused:0:$max_len}
    fi
  fi

  if [[ "$local_send_queue_avg" != "" ]]; then
    local_send_queue_avg=$(unsci $local_send_queue_avg)
    if [[ $(bc -l <<< $local_send_queue_avg*10) -gt 1 ]]; then
      local_send_queue_avg="${bold_on}${red_f}${local_send_queue_avg:0:$max_len}${reset_c}"
    else
      local_send_queue_avg=${local_send_queue_avg:0:$max_len}
    fi
  fi

  if [[ "$local_recv_queue_avg" != "" ]]; then
    local_recv_queue_avg=$(unsci $local_recv_queue_avg)
    if [[ $(bc -l <<< $local_recv_queue_avg*10) -gt 1 ]]; then
      local_recv_queue_avg="${bold_on}${red_f}${local_recv_queue_avg:0:$max_len}${reset_c}"
    else
      local_recv_queue_avg=${local_recv_queue_avg:0:$max_len}
    fi 
  fi

  if [[ "$node_name" != "" ]]; then
    reachable="${bold_on}${green_f}ONLINE${reset_c}"
  fi

  if [[ "$provider_options" != "" ]]; then
    node_weight=$(get_value_from_provider_options pc.weight)/$cluster_weight
  fi

  cluster_conf_id_out=${bold_on}${green_f}${cluster_conf_id:0:max_len}${reset_c}
  last_cluster_conf_ids[$counter]=$cluster_conf_id
  if [[ "$cluster_conf_id" != "" ]]; then
    for (( c=0;c<$host_count;c++ )); do
      if [[ "${last_cluster_conf_ids[c]}" != "" ]]; then
        if [[ ${last_cluster_conf_ids[c]} != $cluster_conf_id ]]; then
          cluster_conf_id_out=${bold_on}${red_f}${cluster_conf_id:0:max_len}${reset_c}
        fi
      fi
    done
  fi

  if ! [[ "$slave_threads" == "" ]]; then
    slave_threads="/$slave_threads"
  fi
  if ! [[ "$node_name" == "" ]]; then
    node_name="$(( counter+1 ))/$node_name"
  fi
  node_name=${node_name:0:max_len}
}

show_status() {
  update_variables "$@"
  if [[ "$first" == "true" ]]; then
    print_header
    first="false"
  fi
  print_values
}

save_tty() {
  trap reset_tty SIGINT SIGTERM ERR EXIT
  if [ -t 0 ]; then
    SAVED_STTY="`stty -g`"
    stty -echo -icanon -icrnl time 0 min 0
  fi
}

reset_tty() {
  trap - SIGINT SIGTERM ERR EXIT
  if [ -t 0 ]; then
    stty "$SAVED_STTY"
  fi
}

cmd_row() {
  c_row=$CMD_ROW
  if ! [[ "$1" == "" ]]; then
    sub=$1
    c_row=$((c_row-sub))
  fi

  echo "$(pos $c_row)"
}

flush_status() {
  stmt_error=$( { mysql "$@" -h$host $username $password $connect_timeout -N -B -e "FLUSH STATUS;"; } 2>&1)
  if [[ $? -ne 0 ]]; then
    col=0
    echo -e "$(cmd_row)$(hr divider_size ' ')$(cmd_row)${red_b}ERROR: Failed flushing replication health status - $stmt_error${reset_c}"
    sleep 3
    echo -e "$(cmd_row)$(hr divider_size ' ')"
    print_commands
  fi
}

change_weight() {
  reset_tty
  col=0
  echo -e "$(cmd_row)$(hr divider_size ' ')$(cmd_row 1)"
  read -p 'Enter node index: ' in_node_index

  re='^[0-9]+$'
  if ! [[ $in_node_index =~ $re ]] ; then
    echo -e "$(cmd_row)${red_b}ERROR: Not a valid index - $in_node_index is not a number between 1 and $host_count${reset_c}"
    in_node_index=$UNSPECIFIED_NODE
    sleep 3
  elif [[ in_node_index -lt 1 ]]; then
    echo -e "$(cmd_row)${red_b}ERROR: Not a valid index $in_node_index < 1${reset_c}"
    in_node_index=$UNSPECIFIED_NODE
    sleep 3
  elif [[ in_node_index -gt host_count ]] ; then
    echo -e "$(cmd_row)${red_b}ERROR: Not a valid index $in_node_index > $host_count${reset_c}"
    in_node_index=$UNSPECIFIED_NODE
    sleep 3
  else
    echo -e "$(cmd_row)$(hr divider_size ' ')$(cmd_row 1)"
    read -p 'Enter node weight: ' in_node_weight

    if ! [[ $in_node_weight =~ $re ]] ; then
      in_node_index=$UNSPECIFIED_NODE
      echo -e "$(cmd_row)${red_b}ERROR: Not a valid node weight <$in_node_weight>${reset_c}"
      sleep 3
    fi
  fi

  print_commands
  save_tty
}

set_weight() {
  if [[ $(( counter+1 )) -eq $in_node_index ]]; then
    col=0
    echo -e "$(cmd_row)$(hr divider_size ' ')$(cmd_row)Changing weight of node $in_node_index to $in_node_weight..."
    stmt_error=$( { mysql "$@" -h$host $username $password $connect_timeout -N -B -e "SET GLOBAL wsrep_provider_options='pc.weight=$in_node_weight';"; } 2>&1)
    if [[ $? -ne 0 ]]; then
      echo -e "$(cmd_row)$(hr divider_size ' ')$(cmd_row)${red_b}ERROR: Failed setting node weight - $stmt_error${reset_c}"
      in_node_index=$UPDATE_WEIGHT_ERROR
    else 
      in_node_index=$UNSPECIFIED_NODE
    fi
    sleep 3
    print_commands
  fi
}

print_commands() {
  col=0
  if [[ $in_node_index -eq $UPDATE_WEIGHT_ERROR ]]; then
    echo -e "$(cmd_row)${invert_on}Commands: Q -> Quit | R -> Reset replication health status${reset_c}"
  else
    echo -e "$(cmd_row)${invert_on}Commands: Q -> Quit | W -> Change node weight | R -> Reset replication health status${reset_c}"
  fi
}

update_terminal_width() {
  terminal_width=$(stty size | cut -d' ' -f2)
  if [[ $terminal_width -ne $last_terminal_width ]]; then
    clear
    print_commands
    print_header
    last_terminal_width=$terminal_width
    col_width=$(( (terminal_width - MARGIN_LEFT) / host_count ))
    if [[ $col_width > 34 ]]; then
      col_width=34
    fi
    width_needed=$(( MARGIN_LEFT + col_width * host_count))
    print_dividers
  fi
}

check_privileges() {
  grants=$(mysql "$@" -h$host $username $password $connect_timeout -N -B -e "SHOW GRANTS;" 2> /dev/null)
  if ! [[ $grants == *"ALL PRIVILEGES"* || $grants = *"SYSTEM_VARIABLES_ADMIN"* || $grants = *"SUPER"* ]]; then
    in_node_index=$UPDATE_WEIGHT_ERROR
  fi
}

#
# parse parameters
#
mysql_options=()
for i in "$@"; do
  case $i in
    --help)
    print_help
    exit 0
    ;;
    --hosts=*)
    hosts="${i#*=}"
    shift
    ;;
    --follow)
    follow="true"
    shift
    ;;
    *)
    mysql_options+=("$i")
    shift
    ;;
  esac
done
set -- "${mysql_options[@]}"

init_colors
clear

if [[ "$hosts" != "" ]]; then
  hosts=${hosts//,/ }
else
  local_service_config=$(mysqld --verbose --help 2> /dev/null | grep -e "^wsrep")

  hosts=$(echo -e "$local_service_config" | grep gcomm:// | cut -d/ -f3 | tr ',' ' ')
  sst_method=$(echo -e "$local_service_config" | grep sst-method | tr -s ' ' | cut -d' ' -f2 | cut -d':' -f1)
  if [[ "$sst_method" == "mariabackup" || "$sst_method" == "xtrabackup" ]]; then
    username="-u$(echo -e "$local_service_config" | grep sst-auth | tr -s ' ' | cut -d' ' -f2 | cut -d':' -f1)"
    password="-p$(echo -e "$local_service_config" | grep sst-auth | tr -s ' ' | cut -d' ' -f2 | cut -d':' -f2)"
  fi
fi
host_count=$(wc -w < <(echo $hosts))

for host in $hosts; do
  check_privileges "$@"
  break;
done

if [[ "$follow" == "true" ]]; then
  print_commands
fi

if [[ $@ == *"-u"* || $@ = *"--user"* ]]; then
  username=""
fi
if [[ $@ == *"-p"* || $@ = *"--password"* ]]; then
  password=""
fi

if [[ $@ = *"--connect-timeout="* ]]; then
  connect_timeout=""
fi

save_tty

declare -a last_cluster_conf_ids
last_cluster_conf_ids=()
for (( c=0;c < $host_count; c++)); do
  last_cluster_conf_ids+=""
done

while [ "x$keypress" != "xq" ]; do
  counter=0
  for host in $hosts; do
    update_terminal_width

    set_weight "$@"
    show_status "$@"
    counter=$((counter+1))
    keypress="`cat -v`"
    if [[ "x$keypress" == "xq" || "x$keypress" == "xQ" ]]; then
      break;
    elif [[ "x$keypress" == "xr" || "x$keypress" == "xR" ]]; then
      flush_status "$@"
    elif [[ "x$keypress" == "xw" || "x$keypress" == "xW" ]]; then
      if [[ $in_node_index -ne $UPDATE_WEIGHT_ERROR ]]; then
        change_weight
      fi
    fi
  done
  if [[ "$follow" != "true" ]]; then
    break
  fi
done

reset_tty

col=0
echo -e "$(cmd_row)$(hr divider_size ' ')"

exit 0